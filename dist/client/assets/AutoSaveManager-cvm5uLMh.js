import{i as e}from"./index-BSOJ-fS9.js";var t=class{constructor(){this.pluginStores=new Map,this.saveTimeout=null,this.isEnabled=!0,this.debounceTime=1e3,this.projectManager=null,this.lastSavedData=null}setProjectManager(e){this.projectManager!==e&&(this.projectManager=e)}registerStore(t,n,r={}){let i={store:n,extractSaveData:r.extractSaveData||(()=>({...n})),restoreData:r.restoreData||(e=>Object.assign(n,e)),...r};return this.pluginStores.set(t,i),e(n,()=>{if(!this.isEnabled){console.log(`üîá Auto-save disabled for ${t}`);return}if(t===`editor`&&n.panels?.isResizingPanels){console.log(`‚è∏Ô∏è Skipping auto-save during panel resize`);return}console.log(`üìù ${t} store changed, scheduling auto-save`),this.scheduleAutoSave()}),console.log(`üîå Registered ${t} store for auto-save`),i}unregisterStore(e){this.pluginStores.delete(e),console.log(`üîå Unregistered ${e} store`)}scheduleAutoSave(){console.log(`‚è∞ Scheduling auto-save with debounce`),this.saveTimeout&&(console.log(`üîÑ Clearing existing auto-save timeout`),clearTimeout(this.saveTimeout)),this.saveTimeout=setTimeout(()=>{this.performAutoSave()},this.debounceTime)}cancelPendingAutoSave(){this.saveTimeout&&(console.log(`üö´ Canceling pending auto-save`),clearTimeout(this.saveTimeout),this.saveTimeout=null)}hasDataChanged(e,t){if(!t)return!0;try{let n=JSON.stringify(e),r=JSON.stringify(t);return n!==r}catch(e){return console.warn(`Error comparing save data:`,e),!0}}async performAutoSave(){if(console.log(`üöÄ AutoSaveManager.performAutoSave() called`),!this.isEnabled||!this.projectManager){console.log(`‚ùå Auto-save skipped - disabled or no project manager`);return}let e=this.pluginStores.get(`editor`);if(e&&e.store.panels?.isResizingPanels){console.log(`‚è∏Ô∏è Skipping auto-save - panels are being resized`);return}try{console.log(`üìä Getting current store data`);let e=this.getAllStoreData();if(!this.hasDataChanged(e,this.lastSavedData))return;console.log(`üíæ Data changed, calling ProjectManager.autoSaveCurrentProject()`),await this.projectManager.autoSaveCurrentProject(),this.lastSavedData=JSON.parse(JSON.stringify(e)),console.log(`‚úÖ Auto-save completed via project system`)}catch(e){console.warn(`‚ùå Auto-save failed:`,e)}}loadFromProject(e){if(console.log(`üîÑ AutoSaveManager loadFromProject called with:`,e),!e){console.warn(`‚ùå No project data provided to loadFromProject`);return}for(let[t,n]of this.pluginStores)try{let r=null;e[t]?(r=e[t],console.log(`üìÇ Found ${t} data directly:`,r)):t===`scene`&&e.scene?(r=e.scene,console.log(`üìÇ Found scene data:`,r)):t===`editor`&&e.editor?(r=e.editor,console.log(`üìÇ Found editor data:`,r)):t===`render`&&e.render?(r=e.render,console.log(`üìÇ Found render data:`,r)):console.log(`‚ùå No data found for ${t} plugin`),r&&(console.log(`üîÑ Restoring ${t} state with:`,r),n.restoreData(r),console.log(`‚úÖ ${t} state loaded from project`))}catch(e){console.warn(`‚ùå Failed to load ${t} state from project:`,e)}setTimeout(()=>{this.lastSavedData=JSON.parse(JSON.stringify(this.getAllStoreData()))},100)}getAllStoreData(){let e={};for(let[t,n]of this.pluginStores)try{e[t]=n.extractSaveData()}catch(e){console.warn(`Failed to extract ${t} data:`,e)}return e}async saveNow(){this.saveTimeout&&(clearTimeout(this.saveTimeout),this.saveTimeout=null),await this.performAutoSave()}enable(){this.isEnabled=!0,console.log(`‚úÖ Auto-save enabled`)}disable(){this.isEnabled=!1,this.saveTimeout&&(clearTimeout(this.saveTimeout),this.saveTimeout=null),console.log(`‚ùå Auto-save disabled`)}hasUnsavedChanges(){try{let e=this.getAllStoreData();return this.hasDataChanged(e,this.lastSavedData)}catch(e){return console.warn(`Error checking for unsaved changes:`,e),!1}}getSaveStatus(){return{isEnabled:this.isEnabled,hasProjectManager:!!this.projectManager,registeredStores:Array.from(this.pluginStores.keys()),pendingSave:!!this.saveTimeout,hasUnsavedChanges:this.hasUnsavedChanges()}}};const n=new t;typeof window<`u`&&(window.autoSaveManager=n,console.log(`AutoSaveManager exposed globally: window.autoSaveManager`));export{n as b};